---
title: "R and Python"
author: "Marc Weber"
format: 
  revealjs:
    embed-resources: true
---

## Blending R and Python

The [retiuclate]() package provides a comprehensive interface to blend workflows in R and Python.  With `reticulate` you can:

- Call Python from R by:
  - sourcing Python scripts
  - importing Python modules
  - use Python interactively within an R session

- Translate between R and Python objects (i.e. dataframes, arrays)

- Provide flexible bindings to different versions of Python and different virtual or conda Python environments

## Call Python in R
We have several options:

- The Python engine for R Markdown / Quarto - R chunks can access Python chunks and vice-versa for bi-directional communication / sharing of objects
- Sourcing a Python script - Python objects and functions in script become available in your R session
- Python REPL - run an interactive Python console from within R

## How to use

First thing is to configure the Python environment we want to use - an example with conda:

```{r}
#| label: set-environment
#| echo: true
#| message: false
library(reticulate)
options(reticulate.conda_binary = "C:/Users/mweber/.conda")

use_condaenv(condaenv = "C:/Users/mweber/.conda/envs/geo", required = TRUE)
```

## Python in R 
We can run a Python chunk and access results in an R chunk
```{python}
#| label: get-flights
#| echo: true
#| message: false
import pandas as pd
import seaborn as sns
flights = sns.load_dataset('flights')
```

```{r}
#| label: get-flights-in-R
#| echo: true
#| message: false
#| fig-width: 7
#| fig-height: 3
#| output-location: slide 
library(ggplot2)
ggplot(py$flights, aes(year, passengers)) + geom_point() + geom_jitter()
```
## R in Python

- We can run an R chunk and access the results in a Python chunk
- First read in Palmer Penguins data in R

```{r}
#| label: penguins
#| echo: true
#| warning: false
#| message: false
library(palmerpenguins)
data("penguins")
```

## Access the data in Python
```{python}
#| echo: true
#| message: false
penguins_py = r.penguins
penguins_py.info()
```

## Plot the data in Python
```{python}
#| echo: true
#| message: false
#| output-location: slide 
import matplotlib.pyplot as plt

penguins_py.plot(x='bill_depth_mm', y='flipper_length_mm', kind='scatter')
plt.show()
```

## Import Python modules
We can work directly with Python modules, data and classes in R via the `$` operator
```{r}
os <- import("os")
os$listdir()
```

## Python REPL
```{r}

```


